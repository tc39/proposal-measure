<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Amount
status: proposal
stage: 2
contributors: Ben Allen, Eemeli Aro, Jesse Alama
location: https://github.com/tc39/proposal-measure/
</pre>

<emu-intro id="sec-decimal-intro-">
  <h1>Introduction</h1>
  <p>This specification consists of two parts:</p>
  <ul>
    <li>The specification of the <a href="https://github.com/tc39/proposal-measure/" title="Measure proposal (GitHub)">Measure proposal</a> and everything related to it, proposed to be added to ECMA-262 in new sections;</li>
    <li>A list of amendments to be made to ECMA-402.</li>
  </ul>
</emu-intro>

<emu-clause id="sec-the-amount-object">
  <h1>The Amount Object</h1>
  <emu-intro id="sec-amount-intro">
    <h1>Introduction</h1>
    <p>An Amount is an object that wraps mathematical value and a precision, together with a unit (e.g., mile, kilogram, EUR, JPY, USD-per-mile). One can intuitively understand an Amount as a number that, so to speak, knows its own precision and what it is measuring.</p>
    <p>The notation for mathematical values used by Amount are <dfn id="dfn-decimal-digit-string">decimal digit string</dfn>, which are Strings that adhere to the <emu-xref href="#prod-DecimalLiteral">DecimalLiteral</emu-xref> production, excepting *"NaN"*, *"Infinity", and *"-Infinity"*.</p>
    <p>Rounding a mathematical value is an important part of this spec. When we say <dfn id="dfn-amount-rounding-mode">rounding mode</dfn> in this specification we simply refer to <emu-xref href="#table-intl-rounding-modes">ECMA-402's definition</emu-xref>.</p>
  </emu-intro>

  <emu-clause id="sec-amount-abstract-operations">
    <h1>Abstract Operations</h1>

    <emu-clause id="sec-operations-for-reading-options">
      <h1>Operations for Reading Options</h1>

      <!-- Copied and modified from ECMA-402 GetOption -->
      <!-- The difference: -->
      <!-- Added support for ~number~ as an expected data type -->

      <emu-clause id="sec-getoption" type="abstract operation">
        <h1>
          GetOption (
            _options_: an Object,
            _property_: a property key,
            _type_: ~boolean~, ~string~ or ~number~,
            _values_: ~empty~ or a List of ECMAScript language values,
            _default_: ~required~ or an ECMAScript language value,
          ): either a normal completion containing an ECMAScript language value or a throw completion
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>It extracts the value of the specified property of _options_, converts it to the required _type_, checks whether it is allowed by _values_ if _values_ is not ~empty~, and substitutes _default_ if the value is *undefined*.</dd>
        </dl>
        <emu-alg>
          1. Let _value_ be ? Get(_options_, _property_).
          1. If _value_ is *undefined*, then
            1. If _default_ is ~required~, throw a *RangeError* exception.
            1. Return _default_.
          1. If _type_ is ~boolean~, then
            1. Set _value_ to ToBoolean(_value_).
          1. Else if _type_ is ~number~, then
            1. Set _value_ to ? ToNumber(_value_).
          1. Else,
            1. Assert: _type_ is ~string~.
            1. Set _value_ to ? ToString(_value_).
          1. If _values_ is not ~empty~ and _values_ does not contain _value_, throw a *RangeError* exception.
          1. Return _value_.
        </emu-alg>
      </emu-clause>
    </emu-clause>

    <emu-clause id="sec-amount-abstract-ops-decimal-digit-strings">
      <h1>Operations on Decimal Digit Strings</h1>

      <emu-clause id="sec-amount-countsignificantdigits" type="abstract operation">
        <h1>CountSignificantDigits(
          _s_: a decimal digit String
        ): a positive integer
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>It computes the number of significant digits in a given <emu-xref href="#dfn-decimal-digit-string">decimal digit String</emu-xref>.</dd>
        </dl>
        <emu-alg>
          1. Let _digitsToCount_ be _s_.
          1. If _digitsToCount_ contains an *e* character, set _digitsToCount_ be the substring of _s_ before the first occurence of *"e"*.
          1. If _digitsToCount_ contains a *"."* character, set _digitsToCount_ to the result of replacing all occurrences of *"."* in _digitsToCount_ by *""*.
          1. Let _l_ be the length of _digitsToCount_.
          1. Return _l_.
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-amount-countfractiondigits" type="abstract operation">
        <h1>CountFractionDigits(
          _s_: a decimal digit String
        ): a non-negative integer
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>It computes the number of fractional digits in a given <emu-xref href="#dfn-decimal-digit-string">decimal digit String</emu-xref>.</dd>
        </dl>
        <emu-alg>
          1. If _s_ contains a *"."* character, then
            1. Let _fractionDigits_ be the substring of _s_ after the first *"."* character up to the first occurrence of *"e"* or *"E"* in _s_, if any.
            1. Let _l_ be the length of _fractionDigits_.
            1. Return _l_.
          1. Otherwise:
            1. Return 0.
        </emu-alg>
      </emu-clause>
    </emu-clause>

    <emu-clause id="sec-amount-abstract-ops-mv">
      <h1>Abstract Operations</h1>

      <emu-clause id="sec-amount-applyroundingmodetopositive" type="abstract operation">
        <h1>ApplyRoundingModeToPositive(
          _m_: a positive mathematical value,
          _roundingMode_: a rounding mode
        ): an integer
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>It computes the closest integer approximation to a given positive mathematical value, rounded according to the given rounding mode.</dd>
        </dl>
        <emu-alg>
          1. Let _mLow_ be floor(_m_).
          1. Let _fraction_ be _m_ – _mLow_.
          1. If _fraction_ = 0, return _mLow_.
          1. Let _mHigh_ be _mLow_ + 1.
          1. If _roundingMode_ is *"floor"* or *"trunc"*, return _mLow_.
          1. If _roundingMode_ is *"ceil" or *"expand"*, return _mHigh_.
          1. If _fraction_ < 0.5, return _mLow_.
          1. If _fraction_ > 0.5, return _mHigh_.
          1. If _roundingMode_ is *"halfTrunc"* or *"halfFloor"*, return _mLow_.
          1. If _roundingMode_ is *"halfExpand" or *"halfCeil"**, return _mHigh_.
          1. If _mLow_ is even, return _mLow_.
          1. Return _mHigh_.
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-amount-roundtofractiondigits" type="abstract operation">
        <h1>RoundToFractionDigits(
          _v_: a mathematical value,
          _n_: a non-negative integer,
          optional _roundingMode_: a rounding mode
        ): a mathematical value
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>It computes the closest approximation to a given mathematical value that has at most the given number of fractional digits, rounding (if necessary) according to the given rounding mode.</dd>
        </dl>
        <emu-alg>
          1. If _roundingMode_ is *undefined*, set _roundingMode_ to *"halfEven"*.
          1. If _v_ = 0, return 0.
          1. If v &lt; 0, then
            1. Let _reverseRoundingMode_ be _roundingMode_.
            1. If _roundingMode_ is *"floor"*, set _reverseRoundingMode_ to *"ceil"*.
            1. If _roundingMode_ is *"ceil"*, set _reverseRoundingMode_ to *"floor"*.
            1. If _roundingMode_ is *"halfCeil"*, set _reverseRoundingMode_ to *"halfFloor"*.
            1. If _roundingMode_ is *"halfFloor"*, set _reverseRoundingMode_ to *"halfCeil"*.
            1. Let _d_ be RoundToFractionDigits(–_v_, _n_, _reverseRoundingMode_).
            1. Return –_d_.
          1. Let _e_ be the unique integer such that 10<sup>_e_</sup> ≤ _v_ < 10<sup>_e_+1</sup>.
          1. Let _pow_ be _e_ + _n_.
          1. Let _m_ be _v_ × 10<sup>–_pow_</sup>.
          1. Let _rounded_ be ApplyRoundingModeToPositive(_m_, _roundingMode_).
          1. Return _rounded_ × 10<sup>_e_ + _n_</sup>.
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-amount-roundtosignificantdigits" type="abstract operation">
        <h1>RoundToSignificantDigits(
          _v_: a mathematical value,
          _n_: a non-negative integer,
          optional _roundingMode_: a rounding mode
        ): a mathematical value
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>It computes the closest approximation to a given mathematical value that has at most the given number of significant digits, rounding (if necessary) according to the given rounding mode.</dd>
        </dl>
        <emu-alg>
          1. If _roundingMode_ is *undefined*, set _roundingMode_ to *"halfEven"*.
          1. If _v_ = 0, return 0.
          1. If v &lt; 0, then
            1. Let _reverseRoundingMode_ be _roundingMode_.
            1. If _roundingMode_ is *"floor"*, set _reverseRoundingMode_ to *"ceil"*.
            1. If _roundingMode_ is *"ceil"*, set _reverseRoundingMode_ to *"floor"*.
            1. Let _d_ be RoundToSignificantDigits(–_v_, _n_, _reverseRoundingMode_).
            1. Return –_d_.
          1. Let _e_ be the unique integer such that 10<sup>_e_</sup> ≤ _v_ < 10<sup>_e_+1</sup>.
          1. If _n_ ≤ _e_, then
            1. Let _pow_ be _e_ - _n_.
            1. Let _m_ be _v_ × 10<sup>–_pow_</sup>.
            1. Let _rounded_ be ApplyRoundingModeToPositive(_m_, _roundingMode_).
            1. Return _rounded_ × 10<sup>_n_ + _e_</sup>.
          1. Otherwise:
            1. <mark>todo</mark>.
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-amount-rendermvwithfractiondigits" type="abstract operation">
        <h1>RenderMVWithFractionDigits(
          _v_: a mathematical value,
          _numDigits_: a non-negative integer,
          optional _roundingMode_: a rounding mode
        ): a String
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>It renders the given mathematical value with a given number of fractional digits, possibly rounding if necessary, using the given rounding mode, which, if missing, is *"halfEven"*.</dd>
        </dl>
        <emu-alg>
          1. If _roundingMode_ is *undefined*, let _mode_ be *"halfEven"*, else let _mode_ be _roundingMode_.
          1. If _v_ < 0, let _prefix_ be *"-"*, else let _prefix_ be "".
          1. If _v_ < 0, set _v_ to -_v_.
          1. Let _rounded_ be ApplyRoundingModeToPositive(_v_ × 10<sup>_numDigits_</sup>, _mode_).
          1. Set _v_ to _rounded_ × 10<sup>-_numDigits_</sup>.
          1. Let _e_ be the smallest non-negative integer such that _v_ × 10<sup>-_numDigits_</sup> is an integer.
          1. Let _s_ be the unique decimal string representation of _v_ without leading zeroes.
          1. If _numDigits_ > _e_, then
            1. If _v_ is an integer, return the string concatenation of _prefix, _s_, *"."*, and *"0"* repeated _numDigits_ times.
            1. Otherwise, return the string concatenation of _prefix_, _s_ and *"0"* repeated _numDigits_ - _e_ times.
          1. Otherwise:
            1. Return the string concatenation of _prefix, _s_ and *"0"* repeated _e_ - _numDigits_ times.
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-amount-getamountoptions" type="abstract operation">
        <h1>GetAmountOptions(
          _opts_: an Object
        ): either a normal completion containing a Record with fields [[FractionDigits]] (a non-negative integer or *undefined*), [[RoundingMode]] (a <emu-xref href="#dfn-amount-rounding-mode">rounding mode</emu-xref>), [[SignificantDigits]] (a positive integer or *undefined*), and [[Unit]] (a String or *undefined*) or a throw completion
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>It validates the given _options_ (an ECMAScript object) for creating an Amount and returns a Record with slots set to appropriate marthematical values (or *undefined*).</dd>
        </dl>
        <emu-alg>
          1. Let _opts_ be ? GetOptionsObject(_opts_).
          1. Let _fractionDigits_ be ? GetOption(_opts_, *"fractionDigits"*, ~number~, ~empty~, *undefined*).
          1. Let _roundingMode_ be ? GetOption(_opts_, *"roundingMode"*, ~string~, « *"ceil"*, *"floor"*, *"expand"*, *"trunc"*, *"halfCeil"*, *"halfFloor"*, *"halfExpand"*, *"halfTrunc"*, *"halfEven"* », *"halfEven"*).
          1. Let _significantDigits_ be ? GetOption(_opts_, *"significantDigits"*, ~number~, ~empty~, *undefined*).
          1. Let _unit_ be ? GetOption(_opts_, *"unit"*, ~string~, ~empty~, *undefined*).
          1. If _fractionDigits_ is not *undefined*, then
            1. If _significantDigits_ is not *undefined*, throw a *RangeError* exception.
            1. If _fractionDigits_ is not a non-negative integral number, throw a *RangeError* exception.
          1. Else if _significantDigits_ is not *undefined*, then
            1. If _significantDigits_ is not an integral number, throw a *RangeError* exception.
            1. If ℝ(_significantDigits_) < 1, throw a *RangeError* exception.
          1. If _unit_ is the empty String, throw a *RangeError* exception.
          1. Return the Record { [[FractionDigits]]: _fractionDigits_, [[RoundingMode]]: _roundingMode_, [[SignificantDigits]]: _significantDigits, [[Units]]: _unit_ }.
        </emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-the-amount-constructor">
    <h1>The Amount Constructor</h1>
    <p>The Amount constructor:</p>
    <ul>
      <li>is <dfn>%Amount%</dfn>.</li>
      <li>is the initial value of the the *"Amount"* property of the global object.</li>
      <li>creates and initializes a new Amount object when called as a constructor</li>
      <li>may be used as the value of an *extends* clause of a class definition.</li>
    </ul>
    <emu-clause id="sec-the-amount-constructor-value">
      <h1>Amount ( _x_ [ , _opts_ ] )</h1>
      <emu-alg>
        1. If NewTarget is *undefined*, throw a *TypeError* exception.
        1. Let _toParse_ be *undefined*.
        1. If _x_ is a BigInt, set _toParse_ to BigInt::toString(_x_, 10).
        1. Else if _x_ is a Number, set _toParse_ to Number::toString(_x_, 10).
        1. Otherwise, if _x_ is a String, set _toParse_ to _x_.
        1. If _toParse_ is not a String, throw a *TypeError* exception.
        1. If _toParse_ is in « *"NaN"*, *"Infinity"*, *"-Infinity"* », throw a *RangeError* exception.
        1. Let _parseResult_ be ParseText(_toParse_, |StrDecimalLiteral|).
        1. Let _validatedOpts_ be ? GetAmountOptions(_opts_).
        1. If _parseResult_ is a List of errors, throw a *SyntaxError* exception.
        1. Let _amountValue_ be ? StringDecimalValue of _parseResult_.
        1. Let _fractionDigits_ be _validatedOpts_.[[FractionDigits]].
        1. Let _roundingMode_ be _validatedOpts_.[[RoundingMode]].
        1. Let _significantDigits_ be _validatedOpts_.[[SignificantDigits]].
        1. Let _unit_ be _validatedOpts_.[[Unit]].
        1. Let _roundedValue_ be _amountValue_.
        1. Assert: If _fractionDigits_ is not *undefined*, then _significantDigits_ is *undefined*.
        1. Assert: If _significantDigits_ is not *undefined*, then _fractionDigits_ is *undefined*.
        1. If both _significantDigits_ and _fractionDigits_ are *undefined*, then
          1. Set _significantDigits_ to CountSignificantDigits(_toParse_).
          1. Set _fractionDigits_ to CountFractionDigits(_toParse_).
        1. Else if _significantDigits_ is *undefined*, then
          1. Set _roundedValue_ be RoundToFractionDigits(_amountValue_, _fractionDigits_, _roundingMode_).
          1. Let _digitStr_ be the unique decimal string representation of _roundedValue_ without leading zeroes.
          1. Set _significantDigits_ to CountSignificantDigits(_digitStr_).
        1. Otherwise:
          1. Set _roundedValue_ be RoundToSignificantDigits(_amountValue_, _significantDigits_, _roundingMode_).
          1. Let _digitStr_ be the unique decimal string representation of _roundedValue_ without leading zeroes.
          1. Set _fractionDigits_ to CountFractionDigits(_digitStr_).
        1. Let _O_ be OrdinaryObjectCreate(%Amount.prototype%, « [[FractionDigits]], [[SignificantDigits]], [[Unit]], [[Value]] »).
        1. Set _O_.[[Value]] to _roundedValue_.
        1. Set _O_.[[SignificantDigits]] to _significantDigits_.
        1. Set _O_.[[FractionDigits]] to _fractionDigits_.
        1. If _unit_ is not *undefined*, set _O_.[[Unit]] to _unit_.
        1. Return _O_.
      </emu-alg>
      <emu-note>
        <p>Given a Number argument, the constructor converts it to a String using the <emu-xref href="#sec-number.prototype.tostring">toString</emu-xref> method (with no arguments). In some cases, this may not be desired; consider passing in a String form of a Number using the <emu-xref href="#sec-number.prototype.tofixed">toFixed</emu-xref> or <emu-xref href="#sec-number.prototype.toprecision">toPrecision</emu-xref> methods.</p>
      </emu-note>
      <emu-clause id="sec-runtime-semantics-stringdecimalvalue" type="sdo">
        <h1>Runtime Semantics: StringDecimalValue ( ): either a normal completion containing a mathematical value or a throw completion</h1>
        <dl class="header">
        </dl>
        <emu-grammar>StrDecimalLiteral ::: `-` StrUnsignedDecimalLiteral</emu-grammar>
        <emu-alg>
          1. Let _a_ be ? StringAmountValue of |StrUnsignedDecimalLiteral|.
          1. Assert: _a_ is finite.
          1. Return −_a_.
        </emu-alg>
        <emu-grammar>StrUnsignedDecimalLiteral ::: `Infinity`</emu-grammar>
        <emu-alg>
          1. Throw a *RangeError* exception.
        </emu-alg>
        <emu-grammar>StrUnsignedDecimalLiteral ::: DecimalDigits `.` DecimalDigits? ExponentPart?</emu-grammar>
        <emu-alg>
          1. Let _a_ be MV of the first |DecimalDigits|.
          1. If the second |DecimalDigits| is present, then
            1. Let _b_ be MV of the second |DecimalDigits|.
            1. Let _n_ be the number of code points in the second |DecimalDigits|.
          1. Else,
            1. Let _b_ be 0.
            1. Let _n_ be 0.
          1. If |ExponentPart| is present, let _e_ be MV of |ExponentPart|. Otherwise, let _e_ be 0.
          1. Return (_a_ + (_b_ × 10<sup>−_n_</sup>)) × 10<sup>_e_</sup>.
        </emu-alg>
        <emu-grammar>StrUnsignedDecimalLiteral ::: `.` DecimalDigits ExponentPart?</emu-grammar>
        <emu-alg>
          1. Let _b_ be MV of |DecimalDigits|.
          1. If |ExponentPart| is present, let _e_ be MV of |ExponentPart|. Otherwise, let _e_ be 0.
          1. Let _n_ be the number of code points in |DecimalDigits|.
          1. Let _newValue_ be _b_ × 10<sup>_e_ − _n_</sup>.
          1. Return _newValue_.
        </emu-alg>
        <emu-grammar>StrUnsignedDecimalLiteral ::: DecimalDigits ExponentPart?</emu-grammar>
        <emu-alg>
          1. Let _a_ be MV of |DecimalDigits|.
          1. If |ExponentPart| is present, let _e_ be MV of |ExponentPart|. Otherwise, let _e_ be 0.
          1. Return _a_ × 10<sup>_e_</sup>.
        </emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-amount-prototype-properties">
  <h1>Properties of the Amount Prototype</h1>

  <emu-clause id="sec-amount.prototype.tostring">
    <h1>Amount.prototype.toString ( [ _options_ ] )</h1>
    <p>This method returns a String value that renders the underlying mathematical value according to its precision, as well as a unit indicator, if present.</p>
    <p>It performs the following steps when called:</p>
    <emu-alg>
      1. Let _O_ be the *this* value.
      1. Perform ? RequireInternalSlot(_O_, [[Value]]).
      1. Perform ? RequireInternalSlot(_O_, [[FractionDigits]]).
      1. Let _processedOptions_ be ? GetOptionsObject(_options_).
      1. Let _displayUnit_ be ? GetOption(_processedOptions_, *"displayUnit"*, ~string~, « *"always"*, *"auto"*, *"never"* », *"auto"*).
      1. Let _u_ be _O_.[[Unit]].
      1. Let _v_ be _O_.[[Value]].
      1. Let _fractionDigits_ be _O_.[[FractionDigits]].
      1. Let _s_ be RenderMVWithFractionDigits(_v_, _fractionDigits_).
      1. If _displayUnit_ is *"never"*, return _s_.
      1. If _u_ is *undefined*, then
        1. If _displayUnit_ is *"always"*, return the string-concatenation of _s_ and *"[1]"*.
        1. Else, return _s_.
      1. Else,
        1. Return the string concatenation of _s_, *"["*, _u_, and *"]"*.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-amount.prototype.tolocalestring">
    <h1>Amount.prototype.toLocaleString ( [ _reserved1_ [ , _reserved2_ ] ] )</h1>
      <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement this method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of this method is used:</p>
      <p>This method produces a String value that represents this Amount object formatted according to the conventions of the host environment’s current locale. This method is implementation-defined, and it is permissible, but not encouraged, for it to return the same thing as <emu-xref href="#sec-amount.prototype.tostring">`toString`</emu-xref>.</p>
      <p>The meanings of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>
  </emu-clause>

  <emu-clause id="sec-amount.prototype.with">
    <h1>Amount.prototype.with ( _options_ )</h1>
    <p>This method returns a fresh Amount object whose underlying mathematical value is equal to the mathematical value of the current Amount, but possibly with different precision as specified in the _options_.</p>
    <p>It performs the following steps when called:</p>
    <emu-alg>
      1. Let _O_ be the *this* value.
      1. Perform ? RequireInternalSlot(_O_, [[Unit]]).
      1. Perform ? RequireInternalSlot(_O_, [[Value]]).
      1. Let _processedOptions_ be ? GetAmountOptions(_options_).
      1. Let _unit_ be _processedOptions_.[[Unit]].
      1. Let _fractionDigits_ be _processedOptions_.[[FractionDigits]].
      1. Let _significantDigits_ be _processedOptions_.[[SignificantDigits]].
      1. Let _value_ be _O_.[[Value]].
      1. If _fractionDigits_ is not *undefined*, set _value_ to RoundToFractionDigits(_value_, _fractionDigits_).
      1. Else if _significantDigits_ is not *undefined*, set _value_ to RoundToSignificantDigits(_value_, _significantDigits_).
      1. Otherwise, throw a *TypeError* exception.
      1. Let _N_ be OrdinaryObjectCreate(*"%Amount.prototype%"*, « [[FractionDigits]], [[SignificantDigits]], [[Unit]], [[Value]] »).
      1. If _unit_ is not *undefined* and _O_.[[Unit]] is not *undefined*, then
        1. If SameValueNonNumber(_unit_, _O_.[[Unit]]) is *false*, throw a *TypeError* exception.
      1. Set _N_.[[Value]] to _value_.
      1. Set _N_.[[Unit]] to _unit_.
      1. Set _N_.[[FractionDigits]] to ℝ(_fractionDigits_).
      1. Set _N_.[[SignificantDigits]] to ℝ(_significantDigits_).
      1. Return _N_.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-amount-symboltoprimitive">
    <h1>Amount.prototype [ %Symbol.toPrimitive% ] ( _hint_ )</h1>
    <p>This method is called by ECMAScript language operators to convert an Amount to a primitive value. The allowed values are *"default"*, *"number"*, and *"string"*. The default is *"number."*</p>
    <p>It performs the following steps when called:</p>
    <emu-alg>
      1. Let _O_ be the the *this* value.
      1. Perform ? RequireInternalSlot(_O_, [[Value]]).
      1. Perform ? RequireInternalSlot(_O_, [[FractionDigits]]).
      1. Perform ? RequireInternalSlot(_O_, [[Unit]]).
      1. If _hint_ is not in « *"default"*, *"number"*, *"string"* », throw a *RangeError* exception.
      1. Let _unit_ be _O_.[[Unit]].
      1. Let _mv_ be _O_.[[Value]].
      1. If _hint_ is *"string"*, then
        1. Let _fractionDigits_ be _O_.[[FractionDigits]].
        1. Let _str_ be RenderMVWithFractionDigits(_mv_, _fractionDigits_).
        1. If _unit_ is *undefined*, return _str_.
        1. Else, return the string concatenation of _str_, *"["*, _unit_, and *"]"*.
      1. Else,
        1. If _unit_ is not *undefined*, throw a *TypeError* exception.
        1. Return the Number value for _mv_.
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-import href="./intl.emu"></emu-import>
